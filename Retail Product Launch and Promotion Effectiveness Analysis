-- This SQL script performs a comprehensive analysis of sales and customer feedback data for a cosmetics retailer.
-- 
-- ## Analysis Overview
-- 1. Examines the impact of product launches on sales and customer feedback.
-- 2. Evaluates the effectiveness of promotions on sales and their correlation with customer satisfaction.
-- 3. Provides insights from customer reviews and ratings, including average ratings, total sales, and trends.
--
-- The analysis uses advanced SQL techniques such as window functions, joins, and common table expressions (CTEs).

-- ## How This Helps Businesses
-- This analysis provides valuable insights into the effectiveness of product launches and promotions, helping businesses:
-- 1. Understand how new products influence sales and customer feedback, allowing for better product strategy and marketing efforts.
-- 2. Evaluate the impact of promotions on sales and customer satisfaction, enabling more effective promotional strategies.
-- 3. Gain actionable insights from customer reviews and ratings to improve product offerings and enhance customer satisfaction.

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Gender VARCHAR(10)
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10, 2),
    LaunchDate DATE
);

CREATE TABLE Promotions (
    PromotionID INT PRIMARY KEY AUTO_INCREMENT,
    PromotionName VARCHAR(255),
    StartDate DATE,
    EndDate DATE
);

CREATE TABLE Sales (
    SaleID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    ProductID INT,
    SaleDate DATE,
    Quantity INT,
    TotalAmount DECIMAL(10, 2),
    PromotionID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (PromotionID) REFERENCES Promotions(PromotionID)
);

CREATE TABLE Feedback (
    FeedbackID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    ProductID INT,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    Comment TEXT,
    FeedbackDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Customers (FirstName, LastName, Gender) VALUES
('Bernadette', 'Williams', 'Female'),
('Jackie', 'Smith', 'Female'),
('Megan', 'Mason', 'Female'),
('Scarlet', 'Scott', 'Female'),
('Taylor', 'Alexander', 'Female'),
('Patrick', 'Jones', 'Male'),
('Brianna', 'Joseph', 'Female'),
('Aliyah', 'Brown', 'Female'),
('Michael', 'Black', 'Male'),
('Karen', 'Maple', 'Female');

INSERT INTO Products (ProductName, Category, Price, LaunchDate) VALUES
('Lipstick', 'Makeup', 20.00, '2024-06-01'),
('Foundation', 'Makeup', 30.00, '2024-06-15'),
('Moisturizer', 'Skincare', 25.00, '2024-07-01'),
('Eye Shadow Palette', 'Makeup', 35.00, '2024-07-10'),
('Serum', 'Skincare', 40.00, '2024-07-20'),
('Blush', 'Makeup', 18.00, '2024-08-01'),
('Sunscreen', 'Skincare', 22.00, '2024-08-10'),
('Concealer', 'Makeup', 28.00, '2024-08-15');

INSERT INTO Promotions (PromotionName, StartDate, EndDate) VALUES
('Summer Sale', '2024-07-01', '2024-07-31'),
('August Discount', '2024-08-01', '2024-08-31');

INSERT INTO Sales (CustomerID, ProductID, SaleDate, Quantity, TotalAmount, PromotionID) VALUES
(1, 1, '2024-07-15', 2, 40.00, NULL),
(2, 3, '2024-07-18', 1, 25.00, NULL),
(3, 2, '2024-07-20', 1, 30.00, NULL),
(4, 4, '2024-07-22', 1, 35.00, NULL),
(5, 5, '2024-07-25', 1, 40.00, 1),
(6, 6, '2024-07-28', 2, 36.00, 2),
(7, 7, '2024-07-30', 1, 22.00, NULL),
(8, 8, '2024-08-01', 1, 28.00, 1),
(9, 1, '2024-08-03', 1, 20.00, NULL),
(10, 2, '2024-08-05', 1, 30.00, NULL);

INSERT INTO Feedback (CustomerID, ProductID, Rating, Comment, FeedbackDate) VALUES
(1, 1, 5, 'Great product! Long-lasting.', '2024-07-16'),
(2, 3, 4, 'Very hydrating, but a bit pricey.', '2024-07-19'),
(3, 2, 3, 'Good coverage, but not my shade.', '2024-07-21'),
(4, 4, 5, 'Amazing colors!', '2024-07-23'),
(5, 5, 4, 'Skin feels great after using this.', '2024-07-26'),
(6, 6, 4, 'Nice blush, but wish it lasted longer.', '2024-07-29'),
(7, 7, 5, 'Perfect for daily use!', '2024-07-31'),
(8, 8, 5, 'Conceals really well!', '2024-08-02'),
(9, 1, 4, 'Good, but a bit dry.', '2024-08-04'),
(10, 2, 5, 'Perfect match and finish!', '2024-08-06');


-- Question 1: Analyze how new product launches influence both sales and customer feedback.

-- Step 1: Analyze sales trends based on product launch dates.
SELECT 
    p.ProductName,
    p.LaunchDate,
    SUM(s.Quantity) AS TotalQuantity,
    SUM(s.TotalAmount) AS TotalSales
FROM 
    Sales s
JOIN 
    Products p ON s.ProductID = p.ProductID
GROUP BY 
    p.ProductName, p.LaunchDate;

-- Step 2: Analyze customer feedback trends based on product launch dates.
SELECT 
    p.ProductName,
    p.LaunchDate,
    AVG(f.Rating) AS AverageRating,
    COUNT(f.FeedbackID) AS FeedbackCount
FROM 
    Feedback f
JOIN 
    Products p ON f.ProductID = p.ProductID
GROUP BY 
    p.ProductName, p.LaunchDate;

-- Step 3: Combine sales and feedback analysis to understand the impact of product launches.
SELECT 
    s.ProductName,
    s.LaunchDate,
    s.TotalQuantity,
    s.TotalSales,
    f.AverageRating,
    f.FeedbackCount
FROM 
    (SELECT 
        p.ProductName,
        p.LaunchDate,
        SUM(s.Quantity) AS TotalQuantity,
        SUM(s.TotalAmount) AS TotalSales
    FROM 
        Sales s
    JOIN 
        Products p ON s.ProductID = p.ProductID
    GROUP BY 
        p.ProductName, p.LaunchDate) s
LEFT JOIN 
    (SELECT 
        p.ProductName,
        p.LaunchDate,
        AVG(f.Rating) AS AverageRating,
        COUNT(f.FeedbackID) AS FeedbackCount
    FROM 
        Feedback f
    JOIN 
        Products p ON f.ProductID = p.ProductID
    GROUP BY 
        p.ProductName, p.LaunchDate) f
ON 
    s.ProductName = f.ProductName AND s.LaunchDate = f.LaunchDate
ORDER BY 
    s.LaunchDate;

-- Question 2: Analyze the effectiveness of promotions in driving sales and their correlation with customer satisfaction.

-- Step 1: Analyze total sales and average ratings during promotion periods.
SELECT 
    p.PromotionName,
    p.StartDate,
    p.EndDate,
    SUM(s.TotalAmount) AS TotalSales,
    AVG(f.Rating) AS AverageRating
FROM 
    Sales s
JOIN 
    Promotions p ON s.PromotionID = p.PromotionID
LEFT JOIN 
    Feedback f ON s.ProductID = f.ProductID
GROUP BY 
    p.PromotionName, p.StartDate, p.EndDate;

-- Step 2: Calculate the correlation between total sales and average feedback rating manually.
-- Calculate required statistics for correlation formula
SELECT 
    SUM(s.TotalAmount) AS SumSales,
    COUNT(s.SaleID) AS CountSales,
    AVG(f.Rating) AS AverageRating,
    SUM(f.Rating) AS SumRating,
    SUM(s.TotalAmount * f.Rating) AS SumSalesRating,
    SUM(s.TotalAmount * s.TotalAmount) AS SumSalesSquared,
    SUM(f.Rating * f.Rating) AS SumRatingSquared
FROM 
    Sales s
JOIN 
    Promotions p ON s.PromotionID = p.PromotionID
LEFT JOIN 
    Feedback f ON s.ProductID = f.ProductID;

-- Step 3: Use the collected statistics to calculate the correlation coefficient
-- Formula: r = (n * ΣXY - ΣX * ΣY) / SQRT((n * ΣX^2 - (ΣX)^2) * (n * ΣY^2 - (ΣY)^2))

SELECT 
    (COUNT(s.SaleID) * SUM(s.TotalAmount * f.Rating) - SUM(s.TotalAmount) * SUM(f.Rating)) / 
    SQRT(
        (COUNT(s.SaleID) * SUM(s.TotalAmount * s.TotalAmount) - SUM(s.TotalAmount) * SUM(s.TotalAmount)) * 
        (COUNT(s.SaleID) * SUM(f.Rating * f.Rating) - SUM(f.Rating) * SUM(f.Rating))
    ) AS SalesFeedbackCorrelation
FROM 
    Sales s
JOIN 
    Promotions p ON s.PromotionID = p.PromotionID
LEFT JOIN 
    Feedback f ON s.ProductID = f.ProductID;

-- Question 3: Analyze insights from customer reviews and ratings, and their impact on sales trends.

-- Step 1: Analyze average ratings and total sales by product.
SELECT 
    p.ProductName,
    AVG(f.Rating) AS AverageRating,
    SUM(s.TotalAmount) AS TotalSales
FROM 
    Products p
LEFT JOIN 
    Feedback f ON p.ProductID = f.ProductID
LEFT JOIN 
    Sales s ON p.ProductID = s.ProductID
GROUP BY 
    p.ProductName;

-- Step 2: Use window functions to rank products based on their average ratings and total sales.
WITH ProductRatings AS (
    SELECT 
        p.ProductName,
        AVG(f.Rating) AS AverageRating,
        SUM(s.TotalAmount) AS TotalSales
    FROM 
        Products p
    LEFT JOIN 
        Feedback f ON p.ProductID = f.ProductID
    LEFT JOIN 
        Sales s ON p.ProductID = s.ProductID
    GROUP BY 
        p.ProductName
),
RankedProducts AS (
    SELECT 
        ProductName,
        AverageRating,
        TotalSales,
        RANK() OVER (ORDER BY AverageRating DESC) AS RatingRank,
        RANK() OVER (ORDER BY TotalSales DESC) AS SalesRank
    FROM 
        ProductRatings
)
SELECT 
    ProductName,
    AverageRating,
    TotalSales,
    RatingRank,
    SalesRank
FROM 
    RankedProducts;

-- Step 3: Analyze trends by comparing average rating and total sales over time.
WITH MonthlySales AS (
    SELECT 
        p.ProductName,
        DATE_FORMAT(s.SaleDate, '%Y-%m') AS Month,
        SUM(s.TotalAmount) AS MonthlySales
    FROM 
        Sales s
    JOIN 
        Products p ON s.ProductID = p.ProductID
    GROUP BY 
        p.ProductName, Month
),
MonthlyRatings AS (
    SELECT 
        p.ProductName,
        DATE_FORMAT(f.FeedbackDate, '%Y-%m') AS Month,
        AVG(f.Rating) AS MonthlyAverageRating
    FROM 
        Feedback f
    JOIN 
        Products p ON f.ProductID = p.ProductID
    GROUP BY 
        p.ProductName, Month
)
SELECT 
    s.ProductName,
    s.Month,
    s.MonthlySales,
    r.MonthlyAverageRating
FROM 
    MonthlySales s
JOIN 
    MonthlyRatings r ON s.ProductName = r.ProductName AND s.Month = r.Month
ORDER BY 
    s.ProductName, s.Month;
